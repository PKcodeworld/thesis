###influence function

############# initial setting ########
#h0(t)=0.1+0.2t
#Z = 0,1,2
rm(list=ls())
beta0 = 2


#____________generate data_____________________
N=50   # 50 - 100 - 300

inversion_gen<-function(n,Z){
  temp = runif(n)
  x = (-1+sqrt(1-40*log(1-temp)/exp(beta0*Z)))/2
}


Ybar<-function(x,dataset){
  sum(1*(dataset>=x))/length(dataset)
}

#______hazard estimation based on interval-Poisson assumption_______

library(bshazard)
library(survival)
library(muhaz)


#########################
kernelreg<-function(x,y,t){
  n <- length(x)
  K <- function(x)  1/sqrt(2*pi) * exp(-(x^2)/2)
  h= n^(-0.2)  #Silverman's Rule of Thumb
  numer=0
  deno = 0
  for(i in 1:n){
    numer = numer+y[i]*K((t-x[i])/h)
    deno= deno+K((t-x[i])/h)
  }
  return (numer/deno)
  
}
#########################


Hellinger_distance <-function(beta){
  b = beta
  alltime = c(fit0$est.grid,fit1$est.grid,fit2$est.grid)
  all_0hazard=c(fit0$haz.est/exp(0*b),fit1$haz.est/exp(1*b),fit2$haz.est/exp(2*b))
  baseline  <-function(t) {kernelreg(alltime,all_0hazard,t)}
  sum = 0
  for (i in 1:length(alltime)){
    sum = sum + (baseline(alltime[i])^(1/2)-all_0hazard[i]^(1/2))^2
  }
  sum
}

influenceH=c()
influenceP= c()
for(i in 1:100){
newdata0 = inversion_gen(N,0)  # 0-8
newdata1 = inversion_gen(N,1)  # 0-6
newdata2 = inversion_gen(N,2)  # 0-4
newdata2 = sort(newdata2)

# setting outliners
del = rep(1,N)    #censoring indicator
fit0<-muhaz(newdata0,del,n.est.grid = N)
fit1<-muhaz(newdata1,del,n.est.grid = N)
fit2<-muhaz(newdata2,del,n.est.grid = N)

hat = optimize(Hellinger_distance,lower = 0,upper = 5)
H_origin_beta = hat$minimum

alltime = c(newdata0,newdata1,newdata2)
alldel = rep(1,(3*N))
g = c(rep(0,N),rep(1,N),rep(2,N))
coxfit = coxph(Surv(alltime,alldel)~g)
P_origin_beta=coxfit$coefficients[1]


zz=seq(0,20,0.1)
influH = c()
influP = c()
for (i in 1:length(zz)){
  newdata2[1]=rnorm(1,zz[i],0.1)
  
  fit2<-muhaz(newdata2,del,n.est.grid = N)
  hat2=optimize(Hellinger_distance,lower = 0,upper = 5)
  H_contaminated_beta=hat2$minimum
  
  alltime = c(newdata0,newdata1,newdata2)
  alldel = rep(1,3*N)
  g = c(rep(0,N),rep(1,N),rep(2,N))
  coxfit = coxph(Surv(alltime,alldel)~g)
  P_contaminated_beta=coxfit$coefficients[1]

  influH=c(influH,N*(H_contaminated_beta-H_origin_beta))
  influP=c(influP,N*(P_contaminated_beta-P_origin_beta))
}
influenceH=c(influenceH,influH)
influenceP=c(influenceP,influP)

}
H=matrix(influenceH,ncol=length(zz),byrow=TRUE)
P=matrix(influenceP,ncol=length(zz),byrow=TRUE)


par(mfrow=c(1,2))
Hsum=colSums(H)
Hmean=Hsum/100
plot(zz,Hmean)
Psum=colSums(P)
Pmean=Psum/100
plot(zz,Pmean)

###########NA estimator

NAestimator <- function (Z,delta) 
{ 
  
  UZ<-unique(Z)      #Unique observed times;
  N<-length(UZ)
  UZ.order<-order(UZ)
  UZ<-UZ[UZ.order]            #sort data;
  N.A <- rep(0,N)             #cannot use NA (reserved by R) for N.A;
  Y<-rep(0,N)
  D<-rep(0,N)
  D[1]<-sum(Z[delta==1]==UZ[1])
  Y[1]<-sum(Z >= UZ[1])
  N.A[1] <- D[1]/Y[1]            #this is for right continuous value
  for (i in 2: N){
    D[i]<-sum(Z[delta==1]==UZ[i])
    Y[i]<-sum(Z >= UZ[i])
    N.A[i] <- N.A[i-1]+D[i]/Y[i]
  }
  
  # Calculate variance and sdandard error of N-A estimator;
  h = rep(0,N)
  h[1]=N.A[1]
  for (i in 2: N){
    h[i]=N.A[i]-N.A[i-1]
  }
  
  
  Full<-data.frame(UZ,D,N.A,h)
  Reduced<-subset(Full, (Full$D>0))
  Reduced
}


##############
rm(list=ls())
############# initial setting ########
beta0 = 1
#h0(t)=0.1+0.2t
#Z = 0,1,2



#____________generate data_____________________
N=300   # 50 - 100 - 300

baseline<-function(t){0.1+0.2*t}

Ybar<-function(x,dataset){
  sum(1*(dataset>=x))/length(dataset)
}

inversion_gen<-function(n,Z){
  temp = runif(n)
  x = (-1+sqrt(1-40*log(1-temp)/exp(beta0*Z)))/2
}

library(bshazard)
library(survival)




#########################
kernelreg<-function(x,y,t){
  n <- length(x)
  K <- function(x)  1/sqrt(2*pi) * exp(-(x^2)/2)
  h= n^(-0.2)  #Silverman's Rule of Thumb
  numer=0
  deno = 0
  for(i in 1:n){
    numer = numer+y[i]*K((t-x[i])/h)
    deno= deno+K((t-x[i])/h)
  }
  return (numer/deno)
  
}
######################### Ying,discrete,PMLE(h0 known)
haz0fun <-function(t) {kernelreg(fit0$time,fit0$hazard,t)}
haz1fun <-function(t) {kernelreg(fit1$time,fit1$hazard,t)}
haz2fun <-function(t) {kernelreg(fit2$time,fit2$hazard,t)}

Hellinger_distance0 <-function(beta){
  b = beta
  alltime = c(fit0$time,fit1$time,fit2$time)
  
  distance0 <- function(x){
    (sqrt(haz0fun(x))-sqrt(baseline(x)))^2*Ybar(x,newdata0)
  }
  
  distance1 <- function(x){
    (sqrt(haz1fun(x))-sqrt(baseline(x)*exp(b*1)))^2*Ybar(x,newdata1)
  }
  
  
  distance2 <- function(x){
    (sqrt(haz2fun(x))-sqrt(baseline(x)*exp(b*2)))^2*Ybar(x,newdata2)
  }
  
  # x=seq(0,10,0.1)
  # y=rep(0,length(x))
  # for (i in 1:length(x)){
  #  y[i]=distance0(x[i])
  # }
  # plot(x,y)
  low0=min(newdata0)
  low1=min(newdata1)
  low2=min(newdata2)
  
  up0 = max(newdata0)
  up1 = max(newdata1)
  up2 = max(newdata2)
  integrate(distance0,low0,up0)$value+integrate(distance1,low1,up1)$value+integrate(distance2,low2,up2)$value
}

Hellinger_distance <-function(beta){
  b = beta
  alltime = c(fit0$time,fit1$time,fit2$time)
  all_0hazard=c(fit0$hazard/exp(0*b),fit1$hazard/exp(1*b),fit2$hazard/exp(2*b))
  
  sum = 0
  for (i in 1:length(alltime)){
    sum = sum + (baseline(alltime[i])^(1/2)-all_0hazard[i]^(1/2))^2
  }
  sum
}


outcomes1 = c()
outcomes2 = c()
outcomes3 = c()

for (i in 1:100){
  newdata0 = inversion_gen(N,0)  # 0-8
  newdata1 = inversion_gen(N,1)  # 0-6
  newdata2 = inversion_gen(N,2)  # 0-4
  
  del = rep(1,N)    #censoring indicator
  fit0<-bshazard(Surv(newdata0,del)~1)
  fit1<-bshazard(Surv(newdata1,del)~1)
  fit2<-bshazard(Surv(newdata2,del)~1)
  
  hat = optimize(Hellinger_distance0,lower = 0,upper = 1)
  outcomes1 = c(outcomes1,hat$minimum)
  
  hat = optimize(Hellinger_distance,lower = 0,upper = 1)
  outcomes2 = c(outcomes2,hat$minimum)
  
  alltime = c(newdata0,newdata1,newdata2)
  alldel = rep(1,3*N)
  g = c(rep(0,N),rep(1,N),rep(2,N))
  
  coxfit = coxph(Surv(alltime,alldel)~g)
  outcomes3 = c(outcomes3,coxfit$coefficients[1])
}

mean(outcomes1)-beta0   #Ying
sum((outcomes1-mean(outcomes1))^2)/length(outcomes1)

mean(outcomes2)-beta0    # discrete
sum((outcomes2-mean(outcomes2))^2)/length(outcomes2)

mean(outcomes3)-beta0
sum((outcomes3-mean(outcomes3))^2)/length(outcomes3)

########## unknown bs no censor + outlier


beta0 =0.5
N=50  
library(survival)


#par(mfrow=c(1,2))

condional_haz = function(Covar,times,del,t,x){
  
  n= length(times)
  K = function(x) {1/sqrt(2*pi) * exp(-(x^2)/2)}
  W = function(y) { integrate(K,lower=-Inf,upper=y)$value  }
  
  #The optimal bandwidths are both of order n^(???1/6)
  #and the corresponding AMISE is of order n^(???2/3)
  
  wx=rep(0,n)
  sumw = 0
  for (i in 1:n){
    sumw = sumw+K((x-Covar[i])/hx)
  }
  sumdeno = 0
  sumnumer = 0
  
  for (i in 1:n){
    wx[i] = K((x-Covar[i])/hx)/sumw
    sumdeno = sumdeno+wx[i]*W((times[i]-t)/ht)
    sumnumer = sumnumer+wx[i]*K((t-times[i])/ht)*del[i]
  }
  
  sumnumer/sumdeno/ht
  
}

kernelreg<-function(x,y,t){
  n <- length(x)
  K <- function(x)  1/sqrt(2*pi) * exp(-(x^2)/2)
  h= n^(-0.2)  #Silverman's Rule of Thumb
  numer=0
  deno = 0
  for(i in 1:n){
    numer = numer+y[i]*K((t-x[i])/h)
    deno= deno+K((t-x[i])/h)
  }
  return (numer/deno)
  
}



inversion_gen<-function(n,Z){
  temp = runif(n)
  x = (-1+sqrt(1-40*log(1-temp)/exp(beta0*Z)))/2
}

MHD1 = function(b){
  zeroset= rep(0,length(alltime))
  est = rep(0,length(alltime))
  for (i in 1:length(alltime)){
    zeroset[i]=condional_haz(Z,alltime,del,alltime[i],Z[i])/exp(b*Z[i])
    est[i] = condional_haz(Z,alltime,del,alltime[i],0)
  }
  cons_h0 = function(t){kernelreg(alltime,zeroset,t)}
  #  est_h0= function(t){condional_haz(Z,alltime,del,t,0)}
  # est_h0 = function(t) 0.1+0.2*t
  distance= 0
  for (i in 1:length(alltime)){
    distance = distance+(cons_h0(alltime[i])^0.5-est[i]^0.5)^2
  }
  distance
}

MHD2 = function(b){

  zeroset= rep(0,length(alltime))
  est = rep(0,length(alltime))
  for (i in 1:length(alltime)){
    zeroset[i]=condional_haz(Z,alltime,del,alltime[i],Z[i])/exp(b*Z[i])
    est[i] = condional_haz(Z,alltime,del,alltime[i],0)
  }
  
  #  cons_h0 = function(t){kernelreg(alltime,zeroset,t)}
  #   est_h0= function(t){condional_haz(Z,alltime,del,t,0)}
   est_h0 = function(t) 0.1+0.2*t
  distance= 0
  for (i in 1:length(alltime)){
    distance = distance+(zeroset[i]^0.5-est[i]^0.5)^2
  }
  distance
}


MHD3 = function(b){
  zeroset= rep(0,length(alltime))
  # est = rep(0,length(alltime))
  for (i in 1:length(alltime)){
    zeroset[i]=condional_haz(Z,alltime,del,alltime[i],Z[i])/exp(b*Z[i])
    #  est[i] = condional_haz(Z,alltime,del,alltime[i],1)/exp(b)
  }
  cons_h0 = function(t){kernelreg(alltime,zeroset,t)}
  # est_h0= function(t){condional_haz(Z,alltime,del,t,1)}
  est_h0 = function(t) 0.1+0.2*t
  distance= 0
  for (i in 1:length(alltime)){
    distance = distance+(zeroset[i]^0.5-est_h0(alltime[i])^0.5)^2
  }
  distance
}
#est_h0= function(t){condional_haz(Z,alltime,del,t,0)}
#est0 = rep(0,N)
#for (i in 1:N){
#  est0[i] = est_h0(alltime[i])
#}
#zeroset= rep(0,length(alltime))
#for (i in 1:length(alltime)){
#  zeroset[i]=condional_haz(Z,alltime,del,alltime[i],Z[i])/exp(beta0*Z[i])
#}
#bs = function(t) 0.1+0.2*t
#par(mfrow=c(1,3))

#plot(alltime,bs(alltime))
#plot(alltime,est0)
#plot(alltime,zeroset)
#const = function(t) kernelreg(alltime,zeroset,t)
#plot(alltime,const(alltime))
#dis = function(a,b){
#  dis = 0
#  for (i in length(a)){
#    dis = dis+(a[i]^0.5-b[i]^0.5)^2
#  }
#  dis
#}
#dis(zeroset,bs(alltime))
#dis(zeroset,const(alltime))


outcomes1 = c()
outcomes2 = c()
outcomes3 = c()
outcomes4 = c()
outcomes5 = c()
outcomes6 = c()
ptm<-proc.time()
for (i in 1:100){
  Z = runif(N,0.1,2)
  alltime= c()
  for (i in 1:N){
    temp = inversion_gen(1,Z[i])
    alltime = c(alltime,temp)
  }
  del = rep(1,N)

  hx=N^(-1/5)*sd(Z)
  ht=N^(-1/5)*sd(alltime)
  hat=optimize(MHD2,lower = 0,upper = 10)
  outcomes1 = c(outcomes1 , hat$minimum)
  
  hat=optimize(MHD3,lower = 0,upper = 10)
  outcomes2 = c(outcomes2 , hat$minimum)
  
  fit = coxph(Surv(alltime,del)~Z)
  outcomes3 = c(outcomes3,fit$coefficients[1])
  
  #################################################
  index = sample(which(del==1),1)
  alltime[index] = 4
  Z[index] = 4

 # summary(inversion_gen(1000,4))
  
  hat=optimize(MHD2,lower = 0,upper = 10)
  outcomes4 = c(outcomes4 , hat$minimum)
  
  hat=optimize(MHD3,lower = 0,upper = 10)
  outcomes5 = c(outcomes5 , hat$minimum)
  
  fit = coxph(Surv(alltime,del)~Z)
  outcomes6 = c(outcomes6,fit$coefficients[1])
} 
mean(outcomes1)- beta0   # MHDE4 before
sum((outcomes1-beta0)^2)/length(outcomes1)
mean(outcomes4)- beta0   # MHDE4 after
sum((outcomes4-beta0 )^2)/length(outcomes4)
mean(outcomes2)- beta0   # MHDE3 before
sum((outcomes2-beta0)^2)/length(outcomes2)
mean(outcomes5)- beta0   # MHDE3 after
sum((outcomes5-beta0 )^2)/length(outcomes5)
mean(outcomes3)- beta0   # PMLE before
sum((outcomes3-beta0)^2)/length(outcomes3)
mean(outcomes6)- beta0   # PMLE after
sum((outcomes6-beta0)^2)/length(outcomes6)
proc.time()-ptm

